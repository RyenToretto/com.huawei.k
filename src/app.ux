<script>
  // 快应用官方: 华为分析服务 https://developer.huawei.com/consumer/cn/service/josp/agc/index.html#/myProject/99536292102212564/9249519184595980730?appId=106051257
  import agconnect from '@agconnect/api';
  import '@agconnect/instance';
  import '@hmscore/analytics-sdk-quickapp';

  import storage from '@system.storage';
  import PubSub from './Common/js/pubSub_1_9_4/index.js';
  import rootStore from './Common/js/rootStore.js';
  import http from './Common/js/http.js';
  import utils from './Common/js/utils.js';
  import { agConnectConfig } from './Common/js/static.js';

  // 快应用官方: 轻粒子数据统计 http://developer.quickingdata.com/doc/developing/application/q_app.html
  import './Common/js/qinglizi/appStatistics.min.js';

  agconnect.instance().configInstance(agConnectConfig);

  module.exports = {
    rootStore,
    utils,
    http,
    agconnect,
    pubSub: PubSub,
    userInfo: {},
    isLogin: false,
    provider: '',
    deviceInfo: {
    },
    async requestUserInfo() {
      const loginInfo = { isLogin: true, userInfo: {} };
      try {
        const { data } = await http.get('/user/info', {});
        if (data.message && +data.message.code === 200 && data.result) {
          loginInfo.userInfo = data.result;
          loginInfo.userInfo.nickname = data.result.name;
        }
      } catch (e) {
        console.log('request User Info, err = ', JSON.stringify(e, null, 4));
      } finally {
        PubSub.publish(rootStore.UPDATE_LOGIN, loginInfo);
      }
    },
    appSubscribe() {
      return new Promise(async (resolve) => {
        await PubSub.subscribe(rootStore.GET_LOGIN, (msg) => this.isLogin);
        await PubSub.subscribe(rootStore.UPDATE_LOGIN, this.updateLogin);
        resolve();
      })
    },
    async getDeviceInfo() {
      const { deviceInfo } = await rootStore.setGlbParams();
      this.deviceInfo = deviceInfo;
      rootStore.getGlbParams();
    },
    async getLoginState() {
      const accessToken = await utils.promiseFactory(storage.get, { key: 'access_token' });
      if (accessToken) {
        await rootStore.setGlbHeader({ accessToken });
        await this.requestUserInfo();
      } else {
        const result = { isLogin: false, userInfo: {} };
        PubSub.publish(rootStore.UPDATE_LOGIN, result);
      }
    },
    async onCreate() {
      await this.appSubscribe();
      await this.getDeviceInfo();
      await this.getLoginState();
      PubSub.publish(rootStore.INIT_DONE);

      // 生产环境屏蔽以下两行
      agconnect.analytics.InitSettings.debugMode = true; // 启用调试模式
      agconnect.analytics.InitSettings.terminalName = "koujianfeng dev terminal"; // 调试模式下，自定义终端标识

      this.$analytics = agconnect.analytics();

      console.info('快应用已创建');
      APP_STATISTICS.app_sta_init(this); // 统计打点
    },
    onDestroy() {
      console.info('快应用已销毁');
    },
    onError(err) { //  监听应用错误的生命周期函数
      try {
        APP_STATISTICS.on_err(err); // 错误统计打点代码
      } catch (error) { }
    },
    updateLogin(msg, { isLogin, userInfo }) {
      console.log(`\n\n===> ${msg}: 用户${
        (userInfo && userInfo.nickname)
         ? ('('+userInfo.nickname+')')
         : ''
      }${isLogin ? '已' : '未'}登陆`);

      this.isLogin = isLogin;
      this.userInfo = userInfo;
    }
  }
</script>
