<template>
  <!-- template里只能有一个根节点 -->
  <!-- 如果background-image需要调用所传的参数，不能使用url,直接使用{{url}}即可 -->
  <div class="user-card-nologin">
    <div class="usercard-top">
      <div class="avatar-noexpand" @click="clickSignBtn">
        <image src="{{content.avatar}}"></image>
        <div class="name-nologin">
          <text class="main-title">{{content.title}}</text>
          <text class="sub-title">{{content.subTitle}}</text>
        </div>
      </div>
    </div>
  </div>
</template>

<style>
  .user-card-nologin {
    flex-direction: column;
    justify-content: center;
    align-content: center;
    align-items: center;
    width: 90%;
    height: 307.2px;
    border-radius: 14.4px;
    padding: 0 14.4px;
    background-image: url(../img/nologin_bg.png);
  }

  .name-nologin {
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin-top: 28.8px;
  }

  .main-title {
    font-size: 30px;
    color: #1A1A1A;
  }

  .sub-title {
    font-size: 24px;
    color: rgba(26, 26, 26, 0.5);
  }

  .usercard-top {
    width: 100%;
  }

  .avatar-noexpand {
    width: 100%;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    text-align: right;
  }

  .avatar-noexpand image {
    width: 96px;
    height: 96px;
  }

  .name text {
    font-weight: bold;
    font-size: 33.6px;
  }
</style>

<script>
  import prompt from "@system.prompt";
  import storage from '@system.storage';
  import account from '@service.account';

  module.exports = {
    props: [
      'content'
    ],
    data() {
      return {
        provider: "",
        accessToken: '',
        content: this.content
      }
    },
    clickSignBtn() {
      this.provider = account.getProvider();
      if (this.provider !== "huawei") {
        prompt.showToast({
          message: "当前设备暂不支持华为账号服务。",
          duration: 2000,
          gravity: "center"
        });
        return;
      }
      account.authorize({
        appid: "106051257",
        type: "token",
        state: "feedbeef",
        scope: "scope.baseProfile",
        success: async (data) => {
          this.accessToken = data.accessToken;
          await this.loginSuccess(data);
        },
        fail: (data, code) => {
          console.log(`code(${code}): 登陆失败, data = ${JSON.stringify(data)}`);
        }
      });
    },
    async loginSuccess(data) {
      const { utils, pubSub, rootStore } = this.$app.$def;
      utils.promiseFactory(storage.set, { key: 'access_token', value: this.accessToken });
      account.getProfile({
        appid: "106051257",
        token: this.accessToken,
        success: (userInfo) => {
          pubSub.publish(rootStore.UPDATE_LOGIN, {
            isLogin: true,
            userInfo
          });
        },
        fail: (res, code) => {
          pubSub.publish(rootStore.UPDATE_LOGIN, {
            isLogin: false
          });
        }
      })
    }
  }
</script>
